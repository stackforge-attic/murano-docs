<?xml version='1.0' encoding='UTF-8'?>
<!--
	Copyright (c) 2013 Mirantis, Inc. Licensed under the Apache License, 
	Version 2.0 (the &quot;License&quot;); you may not use this file 
	except in compliance with the License. You may obtain a copy of the 
	License at http://www.apache.org/licenses/LICENSE-2.0 Unless required 
	by applicable law or agreed to in writing, software distributed under 
	the License is distributed on an &quot;AS IS&quot; BASIS, WITHOUT 
	WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See 
	the License for the specific language governing permissions and 
	limitations under the License.
-->
<chapter xmlns="http://docbook.org/ns/docbook" 
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"	
        xmlns:xlink="http://www.w3.org/1999/xlink"	
        xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd
        	                          http://www.w3.org/1999/xlink http://www.w3.org/1999/xlink.xsd"
        version="5.0">
        <title>Architecture</title>
      			<para>
				The Murano Service communicates with the following OpenStack 
				components:
				<itemizedlist>
					<listitem>
						<para>Horizon - provides a GUI with ability to use all Murano 
						features;</para>
					</listitem>
					<listitem>
						<para>Keystone - authenticates users and provides the security 
						token that is used to work with OpenStack, hence limiting the user 
						abilities in Murano based on OpenStack privileges;</para>
					</listitem>
					<listitem>
						<para>Heat - is used to provision VMs and other OpenStack resources 
						for Windows Environments;</para>
					</listitem>
					<listitem>
						<para>Glance - stores Windows Server VM images, with each image 
						containing an installed OS and a set of scripts</para>
					</listitem>
					<listitem>
						<para>Quantum - provides the network configuration API</para>
					</listitem>
					<listitem>
						<para>Agent - provides agent functionality to communicate with the 
						Orchestration Engine and executes tasks on VMs</para>
					</listitem>
				</itemizedlist>
			</para>
			<figure xml:id="muranoarchitecture">
				<title>Architecture</title>
				<mediaobject><imageobject role="fo">
				<imagedata contentwidth="5in" fileref="../figures/architecture_diagram.png"/>
				</imageobject><imageobject role="html">
				<imagedata fileref="../figures/architecture_diagram.png"/></imageobject></mediaobject>
			</figure>
			<para><emphasis role="bold">REST API</emphasis></para>
			<para>
				Murano exposes a service endpoint for communication with a 
				client. It exposes API functions to manipulate objects such as 
				environment and service. This component is responsible for translating 
				API function parameters to Object Model attributes and propagating the 
				deployment status from the Orchestration Engine.</para>
			<para><emphasis role="bold">Object Model</emphasis></para>
			<para>
				An internal representation of Windows Services and Environments. 
				All attributes and entities are described in the API 
				specification.
			</para>
			<para><emphasis role="bold">Orchestration Engine</emphasis></para>
			<para>
				This is the core component which evaluates Object Model changes 
				and creates a plan for implementing these changes on the instances or 
				in the cloud. This component will support extensions via plug-ins. 
				Plugins can add new services and extend existing services for 
				integration.
			</para>
			<para><emphasis role="bold">Metadata Repository</emphasis></para>
			<para>
				Murano Repository operates with metadata objects: store, 
				display, group and use for deployment. Custom objects can be uploaded 
				to the Murano Metadata Server and these data will be accessible to all 
				Murano components.
			</para>
			<para><emphasis role="bold">Integration with Heat</emphasis></para>
			<para>
				Heat is a cloud resource management engine that allows you to 
				manipulate resources that represent OpenStack entities (Security 
				Groups, Instances, Floating IPs, Volumes, etc.) and some entities such 
				as AutoScaling groups from a single point of control.
			</para>
			<para>
				OpenStack resource provisioning is one of the steps required for 
				environment deployment and Heat will be used for that purpose. Heat 
				allows you to define all OpenStack resources in a single document that 
				will be easy to maintain and will not require resorting to multiple 
				OpenStack APIs while keeping the software configuration 
				separate.
			</para>
</chapter>
