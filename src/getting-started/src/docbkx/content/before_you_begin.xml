<?xml version="1.0" encoding="UTF-8"?>
<!--
 Copyright (c) 2013 Mirantis, Inc.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
 implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-->
<chapter xmlns="http://docbook.org/ns/docbook"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd
                            http://www.w3.org/1999/xlink http://www.w3.org/1999/xlink.xsd"
         version="5.0">
    <title>About Murano</title>
  <section>
    <title>About Murano</title>
    <para>Murano is a new service which allows a non-experienced user to deploy reliable Windows based environments in a “push-the-button” manner. The key goal is to provide a UI and API enabling the deployment and operation of Windows Environments at the Windows Services abstraction level. The service is able to orchestrate complex circular dependent cases in order to set up a complex Windows Environment with multiple dependant services.</para>
    <para/>
    <para>The service addresses following use cases:</para>
    <orderedlist>
      <listitem>
        <para>Self-provisioning of predefined Windows services with their dependencies</para>
      </listitem>
      <listitem>
        <para>Automation of administrative tasks during data center roll-out</para>
      </listitem>
      <listitem>
        <para>Custom windows application as a windows service</para>
      </listitem>
    </orderedlist>
    <para/>
    <para>The solution provides higher level of abstraction for manipulation Windows Environments. Key concepts are:</para>
    <orderedlist>
      <listitem>
        <para>Windows Service - a service such as Active Directory, MSSQL, or IIS, which usually consists of multiple virtual machines and has multiple dependencies.</para>
      </listitem>
      <listitem>
        <para>Windows Environment - a logical unit for all Services and represents a classical Windows Datacenter</para>
      </listitem>
      <listitem>
        <para>Windows VM instance - a VM which hosts a Windows Service. A Windows Service might be deployed over several Windows VM instances.</para>
      </listitem>
    </orderedlist>
    <para/>
    <para>The Key Features of the Service are the following:</para>
    <orderedlist>
      <listitem>
        <para>Native to OpenStack</para>
      </listitem>
      <listitem>
        <para>Introduces abstraction level for Windows Environments</para>
      </listitem>
      <listitem>
        <para>Supports Availability Zones and Disaster Recovery scenarios</para>
      </listitem>
      <listitem>
        <para>Uses native Windows features for HA solutions</para>
      </listitem>
    </orderedlist>
  </section>
  <section>
    <title>Before You Begin</title>
  </section>
  <section>
    <title>Naming Conventions</title>
    <para>To clearly separate commands and parts of configuration files we use boxes, like shown below:</para>
    <para/>
    <informaltable frame="all">
      <tgroup cols="1"><tbody><row><entry><para>...</para><para># Part of config file here</para><para>...</para></entry></row></tbody></tgroup>
    </informaltable>
    <para/>
    <para>All commands start either with ‘&gt;$’ mark or with ‘&gt;#’ mark. The difference is that first should be executed as regular user, while second - as superuser (‘root’).</para>
    <para/>
    <informaltable frame="all">
      <tgroup cols="1"><tbody><row><entry><para>&gt;$ echo ‘Execute this command as regular user’</para></entry></row></tbody></tgroup>
    </informaltable>
    <para/>
    <informaltable frame="all">
      <tgroup cols="1"><tbody><row><entry><para>&gt;# echo ‘Execute this command as root’</para></entry></row></tbody></tgroup>
    </informaltable>
    <para/>
  </section>
  <section>
    <title>Use Appropriate Branch</title>
    <para>There are a few branches that can be found in all Murano repositories: master, release-0.1, release-0.2 and so on. Branch master is the most recent between the releases, but not as stable as release-x.x branches.</para>
  </section>
  <section>
    <title>Use Separate vHost in RabbitMQ</title>
    <para>In general it is OK to configure Murano services to use the root (‘/’) vHost in RabbitMQ and use the same user credentials as OpenStack services use.</para>
    <para/>
    <para>However, we recommend to create a separate vHost with separate user for each Murano devbox. There are a few reasons for that:</para>
    <orderedlist>
      <listitem>
        <para>this prevents queue name collisions</para>
      </listitem>
      <listitem>
        <para>this prevents message stealing from queues</para>
      </listitem>
      <listitem>
        <para>this simplify debugging</para>
      </listitem>
    </orderedlist>
    <para/>
    <para>If you are planning to use only one devbox then you may stay with ‘/’ vHost.</para>
    <para/>
    <para>Steps required to configure your own vHost are described in <link linkend="">RabbitMQ</link><link linkend=""> </link><link linkend="">Configuration</link><link linkend=""> </link><link linkend="">Notes</link>.</para>
  </section>
  <section>
    <title>System Requirements</title>
  </section>
  <section>
    <title>OpenStack Lab</title>
  </section>
  <section>
    <title>Supported OS</title>
    <orderedlist>
      <listitem>
        <para>Ubuntu Server 12.04 x64</para>
      </listitem>
    </orderedlist>
  </section>
  <section>
    <title>Hardware Requirements</title>
    <orderedlist>
      <listitem>
        <para>CPU: 8+ cores</para>
      </listitem>
      <listitem>
        <para>RAM: 12+ GB</para>
      </listitem>
      <listitem>
        <para>HDD (select any option)</para>
      </listitem>
      <listitem>
        <para>NIC: 1x Ethernet 1+ Gbps</para>
      </listitem>
    </orderedlist>
  </section>
  <section>
    <title>Software Requirements</title>
    <orderedlist>
      <listitem>
        <para>Heat installed</para>
      </listitem>
      <listitem>
        <para><note><remark>Denis Koryavov:</remark></note><note><remark>This is Getting Started Guide, so is better to create an instruction how to create vhost in RabbitMQ.</remark></note>RabbitMQ configured (+ additional vhosts and user accounts)</para>
      </listitem>
      <listitem>
        <para>Windows Server 2012 Standard image imported into Glance (described later)</para>
      </listitem>
      <listitem>
        <para>Samba share with prerequisites (described later)</para>
      </listitem>
      <listitem>
        <para>OpenStack metadata service.</para>
      </listitem>
    </orderedlist>
  </section>
  <section>
    <title>Devbox</title>
    <para>We suggest to use virtual machine for Murano, as it allows you to backup your VM easily.</para>
    <para/>
    <para>Any type of hypervisor software which supports linux as guest OS could be used.</para>
    <para>KVM, VMWare and VirtualBox were tested with success.</para>
    <para/>
    <para>There is a <link linkend="">Murano</link><link linkend=""> </link><link linkend="">VM</link> section in <link linkend="">Appendix</link> which contains steps to build your own VM.</para>
  </section>
  <section>
    <title>Supported OS</title>
    <orderedlist>
      <listitem>
        <para>Ubuntu Server 12.04 LTS x86_64</para>
      </listitem>
      <listitem>
        <para>CentOS 6.4 x86_64</para>
      </listitem>
    </orderedlist>
  </section>
  <section>
    <title>Hardware Requirements</title>
    <orderedlist>
      <listitem>
        <para>RAM: 512 MB</para>
      </listitem>
      <listitem>
        <para>CPU: 1 core</para>
      </listitem>
      <listitem>
        <para>HDD: 20 GB</para>
      </listitem>
      <listitem>
        <para>1 NIC</para>
      </listitem>
    </orderedlist>
  </section>
  <section>
    <title>Software Requirements</title>
    <orderedlist>
      <listitem>
        <para>Packages:</para>
      </listitem>
      <listitem>
        <para>X Server is NOT required and system runlevel 3 is preferred.</para>
      </listitem>
    </orderedlist>
  </section>
  <section>
    <title>Setup Lab Environment</title>
  </section>
  <section>
    <title>Install OpenStack</title>
    <para>You need a working installation of OpenStack first. It could be your own installation which meets the requirements, or a new one using the installation method provided below.</para>
  </section>
  <section>
    <title>Using Devstack</title>
    <para>Currently the most simple way to build a lab is to use devstack.</para>
    <para/>
    <para>The steps are quite simple:</para>
    <orderedlist>
      <listitem>
        <para>Install and configure OS on your hardware. The recommended OS is Ubuntu Server 12.04 x64. Minimal configuration would be enough.</para>
      </listitem>
      <listitem>
        <para>Install all the latest updates.</para>
      </listitem>
    </orderedlist>
    <informaltable frame="all">
      <tgroup cols="1"><tbody><row><entry><para>&gt;# apt-get update</para><para>&gt;# apt-get -y upgrade</para></entry></row></tbody></tgroup>
    </informaltable>
    <orderedlist>
      <listitem>
        <para>Create a user stack</para>
      </listitem>
    </orderedlist>
    <informaltable frame="all">
      <tgroup cols="1"><tbody><row><entry><para>&gt;# adduser stack</para></entry></row></tbody></tgroup>
    </informaltable>
    <orderedlist>
      <listitem>
        <para>Add user stack to sudoers</para>
      </listitem>
    </orderedlist>
    <informaltable frame="all">
      <tgroup cols="1"><tbody><row><entry><para>&gt;# echo ‘stack ALL=(ALL) NOPASSWD:ALL' &gt; /etc/sudoers.d/stack</para><para>&gt;# chmod 0440 /etc/sudoers.d/stack</para></entry></row></tbody></tgroup>
    </informaltable>
    <orderedlist>
      <listitem>
        <para>Create a folder for OpenStack installation files</para>
      </listitem>
    </orderedlist>
    <informaltable frame="all">
      <tgroup cols="1"><tbody><row><entry><para>&gt;# mkdir /opt/stack</para><para>&gt;# chown stack:stack /opt/stack</para></entry></row></tbody></tgroup>
    </informaltable>
    <orderedlist>
      <listitem>
        <para>Clone the devstack repo</para>
      </listitem>
    </orderedlist>
    <informaltable frame="all">
      <tgroup cols="1"><tbody><row><entry><para>&gt;# su stack</para><para>&gt;$ cd</para><para>&gt;$ git clone https://github.com/openstack-dev/devstack.git</para></entry></row></tbody></tgroup>
    </informaltable>
    <orderedlist>
      <listitem>
        <para>Checkout the stable/grizzly branch</para>
      </listitem>
    </orderedlist>
    <informaltable frame="all">
      <tgroup cols="1"><tbody><row><entry><para>&gt;$ cd devstack</para><para>&gt;$ git checkout stable/grizzly</para></entry></row></tbody></tgroup>
    </informaltable>
    <orderedlist>
      <listitem>
        <para>Get localrc and local.sh files</para>
      </listitem>
    </orderedlist>
    <informaltable frame="all">
      <tgroup cols="1"><tbody><row><entry><para>&gt;$ wget <ulink url="https://raw.github.com/stackforge/murano-deployment/release-0.2/getting-started/localrc">https</ulink><ulink url="https://raw.github.com/stackforge/murano-deployment/release-0.2/getting-started/localrc">://</ulink><ulink url="https://raw.github.com/stackforge/murano-deployment/release-0.2/getting-started/localrc">raw</ulink><ulink url="https://raw.github.com/stackforge/murano-deployment/release-0.2/getting-started/localrc">.</ulink><ulink url="https://raw.github.com/stackforge/murano-deployment/release-0.2/getting-started/localrc">github</ulink><ulink url="https://raw.github.com/stackforge/murano-deployment/release-0.2/getting-started/localrc">.</ulink><ulink url="https://raw.github.com/stackforge/murano-deployment/release-0.2/getting-started/localrc">com</ulink><ulink url="https://raw.github.com/stackforge/murano-deployment/release-0.2/getting-started/localrc">/</ulink><ulink url="https://raw.github.com/stackforge/murano-deployment/release-0.2/getting-started/localrc">stackforge</ulink><ulink url="https://raw.github.com/stackforge/murano-deployment/release-0.2/getting-started/localrc">/</ulink><ulink url="https://raw.github.com/stackforge/murano-deployment/release-0.2/getting-started/localrc">murano</ulink><ulink url="https://raw.github.com/stackforge/murano-deployment/release-0.2/getting-started/localrc">-</ulink><ulink url="https://raw.github.com/stackforge/murano-deployment/release-0.2/getting-started/localrc">deployment</ulink><ulink url="https://raw.github.com/stackforge/murano-deployment/release-0.2/getting-started/localrc">/</ulink><ulink url="https://raw.github.com/stackforge/murano-deployment/release-0.2/getting-started/localrc">release</ulink><ulink url="https://raw.github.com/stackforge/murano-deployment/release-0.2/getting-started/localrc">-0.2/</ulink><ulink url="https://raw.github.com/stackforge/murano-deployment/release-0.2/getting-started/localrc">getting</ulink><ulink url="https://raw.github.com/stackforge/murano-deployment/release-0.2/getting-started/localrc">-</ulink><ulink url="https://raw.github.com/stackforge/murano-deployment/release-0.2/getting-started/localrc">started</ulink><ulink url="https://raw.github.com/stackforge/murano-deployment/release-0.2/getting-started/localrc">/</ulink><ulink url="https://raw.github.com/stackforge/murano-deployment/release-0.2/getting-started/localrc">localrc</ulink> -O localrc</para><para>&gt;$ wget <ulink url="https://raw.github.com/stackforge/murano-deployment/release-0.2/getting-started/local.sh">https</ulink><ulink url="https://raw.github.com/stackforge/murano-deployment/release-0.2/getting-started/local.sh">://</ulink><ulink url="https://raw.github.com/stackforge/murano-deployment/release-0.2/getting-started/local.sh">raw</ulink><ulink url="https://raw.github.com/stackforge/murano-deployment/release-0.2/getting-started/local.sh">.</ulink><ulink url="https://raw.github.com/stackforge/murano-deployment/release-0.2/getting-started/local.sh">github</ulink><ulink url="https://raw.github.com/stackforge/murano-deployment/release-0.2/getting-started/local.sh">.</ulink><ulink url="https://raw.github.com/stackforge/murano-deployment/release-0.2/getting-started/local.sh">com</ulink><ulink url="https://raw.github.com/stackforge/murano-deployment/release-0.2/getting-started/local.sh">/</ulink><ulink url="https://raw.github.com/stackforge/murano-deployment/release-0.2/getting-started/local.sh">stackforge</ulink><ulink url="https://raw.github.com/stackforge/murano-deployment/release-0.2/getting-started/local.sh">/</ulink><ulink url="https://raw.github.com/stackforge/murano-deployment/release-0.2/getting-started/local.sh">murano</ulink><ulink url="https://raw.github.com/stackforge/murano-deployment/release-0.2/getting-started/local.sh">-</ulink><ulink url="https://raw.github.com/stackforge/murano-deployment/release-0.2/getting-started/local.sh">deployment</ulink><ulink url="https://raw.github.com/stackforge/murano-deployment/release-0.2/getting-started/local.sh">/</ulink><ulink url="https://raw.github.com/stackforge/murano-deployment/release-0.2/getting-started/local.sh">release</ulink><ulink url="https://raw.github.com/stackforge/murano-deployment/release-0.2/getting-started/local.sh">-0.2/</ulink><ulink url="https://raw.github.com/stackforge/murano-deployment/release-0.2/getting-started/local.sh">getting</ulink><ulink url="https://raw.github.com/stackforge/murano-deployment/release-0.2/getting-started/local.sh">-</ulink><ulink url="https://raw.github.com/stackforge/murano-deployment/release-0.2/getting-started/local.sh">started</ulink><ulink url="https://raw.github.com/stackforge/murano-deployment/release-0.2/getting-started/local.sh">/</ulink><ulink url="https://raw.github.com/stackforge/murano-deployment/release-0.2/getting-started/local.sh">local</ulink><ulink url="https://raw.github.com/stackforge/murano-deployment/release-0.2/getting-started/local.sh">.</ulink><ulink url="https://raw.github.com/stackforge/murano-deployment/release-0.2/getting-started/local.sh">sh</ulink> -O local.sh</para><para>&gt;$ chmod +x local.sh</para></entry></row></tbody></tgroup>
    </informaltable>
    <orderedlist>
      <listitem>
        <para>Start devstack</para>
      </listitem>
    </orderedlist>
    <informaltable frame="all">
      <tgroup cols="1"><tbody><row><entry><para>&gt;$ ./stack.sh</para></entry></row></tbody></tgroup>
    </informaltable>
    <orderedlist>
      <listitem>
        <para>When stack.sh finishes  execution your OpenStack installation is ready.</para>
      </listitem>
    </orderedlist>
  </section>
  <section>
    <title>Prepare Shared Prerequisites</title>
  </section>
  <section>
    <title>Configure Samba Share</title>
    <orderedlist>
      <listitem>
        <para>Install SAMBA</para>
      </listitem>
    </orderedlist>
    <informaltable frame="all">
      <tgroup cols="1"><tbody><row><entry><para>&gt;# apt-get update&gt;# apt-get install samba</para></entry></row></tbody></tgroup>
    </informaltable>
    <orderedlist>
      <listitem>
        <para>Create shared folder</para>
      </listitem>
    </orderedlist>
    <informaltable frame="all">
      <tgroup cols="1"><tbody><row><entry><para>&gt;# mkdir -p /opt/samba/share&gt;# chown nobody:nogroup /opt/samba/share</para></entry></row></tbody></tgroup>
    </informaltable>
    <orderedlist>
      <listitem>
        <para>Edit /etc/samba/smb.conf</para>
      </listitem>
    </orderedlist>
    <informaltable frame="all">
      <tgroup cols="1"><tbody><row><entry><para>...[global]    ...    security = user...[share]    comment = Deployment Share    path = /opt/samba/share    browsable = yes    guest ok = yes    guest account = nobody    read only = no    create mask = 0755</para></entry></row></tbody></tgroup>
    </informaltable>
    <orderedlist>
      <listitem>
        <para>Restart services</para>
      </listitem>
    </orderedlist>
    <informaltable frame="all">
      <tgroup cols="1"><tbody><row><entry><para>&gt;# restart smbd&gt;# restart nmdb</para></entry></row></tbody></tgroup>
    </informaltable>
  </section>
  <section>
    <title>Copy Prerequisites Into The Share</title>
    <orderedlist>
      <listitem>
        <para>Create folder structure</para>
      </listitem>
    </orderedlist>
    <informaltable frame="all">
      <tgroup cols="1"><tbody><row><entry><para>&gt;# mkdir -p “/opt/samba/share/Prerequisites/IIS”</para><para>&gt;# mkdir -p “/opt/samba/share/Prerequisites/SQL Server/2012”</para><para>&gt;# mkdir -p “/opt/samba/share/Prerequisites/SQL Server/Tools”</para></entry></row></tbody></tgroup>
    </informaltable>
    <orderedlist>
      <listitem>
        <para>Add files to the folder structure under /opt/samba/share folder:</para>
      </listitem>
    </orderedlist>
  </section>
  <section>
    <title>Build Windows Image</title>
    <para>A pre-built Windows Image is required to create environments in Murano. Because of its size it’s better to build the image on the same host where OpenStack is installed.</para>
    <para/>
    <para>This section describe steps required to build such an image.</para>
  </section>
  <section>
    <title>Prepare Build Environment</title>
    <orderedlist>
      <listitem>
        <para>Samba should be already installed (See <link linkend="">Configure</link><link linkend=""> </link><link linkend="">samba</link><link linkend=""> </link><link linkend="">share</link>)</para>
      </listitem>
      <listitem>
        <para>Clone murano-deployment repository</para>
      </listitem>
    </orderedlist>
    <informaltable frame="all">
      <tgroup cols="1"><tbody><row><entry><para>&gt;# cd /opt/git</para><para>&gt;# git clone git://github.com/stackforge/murano-deployment.git</para></entry></row></tbody></tgroup>
    </informaltable>
    <orderedlist>
      <listitem>
        <para>Change directory to murano-deployment/image-builder folder</para>
      </listitem>
    </orderedlist>
    <informaltable frame="all">
      <tgroup cols="1"><tbody><row><entry><para>&gt;# cd /opt/git/murano-deployment/image-builder</para></entry></row></tbody></tgroup>
    </informaltable>
    <orderedlist>
      <listitem>
        <para>Create folder structure for image builder</para>
      </listitem>
    </orderedlist>
    <informaltable frame="all">
      <tgroup cols="1"><tbody><row><entry><para>&gt;# make build-root</para></entry></row></tbody></tgroup>
    </informaltable>
    <orderedlist>
      <listitem>
        <para>Add files into folder structure under /opt/image-builder folder:</para>
      </listitem>
      <listitem>
        <para>Test that all required files are in place</para>
      </listitem>
    </orderedlist>
    <informaltable frame="all">
      <tgroup cols="1"><tbody><row><entry><para>&gt;# make test-build-files</para></entry></row></tbody></tgroup>
    </informaltable>
  </section>
  <section>
    <title>Build The Image</title>
    <orderedlist>
      <listitem>
        <para>Get list of supported images</para>
      </listitem>
    </orderedlist>
    <informaltable frame="all">
      <tgroup cols="1"><tbody><row><entry><para>&gt;# make</para></entry></row></tbody></tgroup>
    </informaltable>
    <orderedlist>
      <listitem>
        <para>Run image build process</para>
      </listitem>
    </orderedlist>
    <informaltable frame="all">
      <tgroup cols="1"><tbody><row><entry><para>&gt;# make ws-2012-std</para></entry></row></tbody></tgroup>
    </informaltable>
    <orderedlist>
      <listitem>
        <para>Wait until process finishes</para>
      </listitem>
      <listitem>
        <para>The image file ws-2012-std.qcow2 will be stored in /opt/image-builder/share/images folder.</para>
      </listitem>
    </orderedlist>
  </section>
  <section>
    <title>Import Windows Image Into Glance</title>
    <para>Now when you’ve built a Windows Image it must be imported into Glance.</para>
    <para/>
    <orderedlist>
      <listitem>
        <para>Import openrc file which contains environment variables definitions required by OpenStack components</para>
      </listitem>
    </orderedlist>
    <informaltable frame="all">
      <tgroup cols="1"><tbody><row><entry><para>&gt;$ source openrc</para></entry></row></tbody></tgroup>
    </informaltable>
    <orderedlist>
      <listitem>
        <para>Import the Windows Server 2012 image into Glance</para>
      </listitem>
    </orderedlist>
    <informaltable frame="all">
      <tgroup cols="1"><tbody><row><entry><para>&gt;$ cd /opt/image-builder/share/images&gt;$ glance image-create \ --name ws-2012-std \ --disk-format qcow2 \ --container-type bare \ --file ws-2012-std.qcow2 \ --is-public true \ --property murano_image_info='{"type":"ws-2012-std",\ "title":"Windows Server 2012 Standard"}'</para></entry></row></tbody></tgroup>
    </informaltable>
    <para/>
    <para>WARNING: the value of the --property argument named murano_image_info is a JSON string. Only double quotes are valid in JSON, so please type the string exactly as in the example above.</para>
  </section>
  <section>
    <title>Setup Devbox</title>
    <para>There are a few ways to install Murano devbox</para>
    <orderedlist>
      <listitem>
        <para>using Vagrant automation tool</para>
      </listitem>
      <listitem>
        <para>using a script to install all components automatically</para>
      </listitem>
      <listitem>
        <para>install everything manually</para>
      </listitem>
    </orderedlist>
    <para/>
    <para>NOTE: The preferred way is to use script for automated installation. It is described in <link linkend="">Automated</link><link linkend=""> </link><link linkend="">Way</link> section below.</para>
  </section>
  <section>
    <title>Vagrant Way</title>
    <para>There is a simple way to get working Murano devbox. This could be done using Vagrant tool.</para>
  </section>
  <section>
    <title>Prepare Environment</title>
  </section>
  <section>
    <title>Ubuntu</title>
    <orderedlist>
      <listitem>
        <para>Install VirtualBox:</para>
      </listitem>
    </orderedlist>
    <informaltable frame="all">
      <tgroup cols="1"><tbody><row><entry><para>&gt;# apt-get install virtualbox</para></entry></row></tbody></tgroup>
    </informaltable>
    <orderedlist>
      <listitem>
        <para>Install VirtualBox Extension <note><remark>tsufiev:</remark></note><note><remark>Where is the command for Extension Pack or instructions (if you mean Guest Additions)?</remark></note><note><remark>Dmitry Teselkin:</remark></note><note><remark>No, I mean Extension Pack. There is no simple command, the easiest way is to download it from the site and "run it" - VirtuaBox will open the file and imports the pack.</remark></note><note><remark>tsufiev:</remark></note><note><remark>Ok, let's leave it as an exercise to the user :)</remark></note>Pack.</para>
      </listitem>
      <listitem>
        <para>Install Vagrant:</para>
      </listitem>
    </orderedlist>
    <informaltable frame="all">
      <tgroup cols="1"><tbody><row><entry><para>&gt;# apt-get install vagrant <note><remark>tsufiev:</remark></note><note><remark>Actually, it is called --no-install-recommends</remark></note><note><remark>Dmitry Teselkin:</remark></note><note><remark>Thanks, fixed</remark></note>--no-install-recommends</para></entry></row></tbody></tgroup>
    </informaltable>
    <orderedlist>
      <listitem>
        <para>Upgrade the Vagrant:</para>
      </listitem>
    </orderedlist>
    <informaltable frame="all">
      <tgroup cols="1"><tbody><row><entry><para>&gt;# wget http://files.vagrantup.com/packages/7ec0ee1d00a916f80b109a298bab08e391945243/vagrant_1.2.7_x86_64.deb</para></entry></row></tbody></tgroup>
    </informaltable>
    <orderedlist>
      <listitem/>
    </orderedlist>
    <informaltable frame="all">
      <tgroup cols="1"><tbody><row><entry><para>&gt;# dpkg --install vagrant_1.2.7_x86_64.deb</para></entry></row></tbody></tgroup>
    </informaltable>
  </section>
  <section>
    <title>Launch The Box</title>
    <orderedlist>
      <listitem>
        <para>Clone murano-vagrant repository</para>
      </listitem>
    </orderedlist>
    <informaltable frame="all">
      <tgroup cols="1"><tbody><row><entry><para>&gt;$ git clone https://github.com<note><remark>akuznetsova:</remark></note><note><remark>I think you should change this repository</remark></note><note><remark>Dmitry Teselkin:</remark></note><note><remark>I will, later</remark></note><note><remark>Dmitry Teselkin:</remark></note><note><remark>Done</remark></note>/stackforge/murano-deployment.git</para></entry></row></tbody></tgroup>
    </informaltable>
    <orderedlist>
      <listitem>
        <para>Change directory to cloned repository folder</para>
      </listitem>
    </orderedlist>
    <informaltable frame="all">
      <tgroup cols="1"><tbody><row><entry><para>&gt;$ cd murano-deployment/getting-started</para><para>&gt;$ git checkout -b release-0.2 origin/release-0.2</para></entry></row></tbody></tgroup>
    </informaltable>
    <orderedlist>
      <listitem>
        <para>IMPORTANT STEP: Edit the lab-binding.rc file - replace all the markers ‘***’ <note><remark>tsufiev:</remark></note><note><remark>It is reasonable to show here lab-binding.rc with places to be filled - or provide the link to the lab-binding.rc in text below.</remark></note><note><remark>Dmitry Teselkin:</remark></note><note><remark>Done</remark></note>to your settings. For example:</para>
      </listitem>
    </orderedlist>
    <informaltable frame="all">
      <tgroup cols="1"><tbody><row><entry><para>...</para><para># Lab Settings</para><para>#-------------</para><para># Address of the host which provides Keystone service.</para><para>#</para><para># LAB_HOST='192.168.1.2'</para><para>LAB_HOST='***.***.***.***'</para><para>...</para></entry></row></tbody></tgroup>
    </informaltable>
    <orderedlist>
      <listitem>
        <para>Launch the box:</para>
      </listitem>
    </orderedlist>
    <informaltable frame="all">
      <tgroup cols="1"><tbody><row><entry><para>&gt;$ ./launch-the-box.sh</para></entry></row></tbody></tgroup>
    </informaltable>
    <orderedlist>
      <listitem>
        <para>The script will do the following:</para>
      </listitem>
      <listitem>
        <para>Vagrant will do the rest:</para>
      </listitem>
      <listitem>
        <para>When everything is done open the<ulink url="http://127.0.0.1:8080/horizon"> </ulink><ulink url="http://127.0.0.1:8080/horizon">http</ulink><ulink url="http://127.0.0.1:8080/horizon">://127.0.0.1:8080/</ulink><ulink url="http://127.0.0.1:8080/horizon">horizon</ulink> link.</para>
      </listitem>
    </orderedlist>
  </section>
  <section>
    <title><note><remark>Denis Koryavov:</remark></note><note><remark>It is necessary to write that this way is recommended and Manual Way should be used ONLY if something got wrong with automated way.</remark></note>Automated Way</title>
    <note>
      <remark>Denis Koryavov:</remark>
    </note>
    <note>
      <remark>It is necessary to write that this way is recommended and Manual Way should be used ONLY if something got wrong with automated way.</remark>
    </note>
    <para>Build your VM using instructions from <link linkend="">Murano</link><link linkend=""> </link><link linkend="">VM</link> first.</para>
    <para/>
    <orderedlist>
      <listitem>
        <para>Create a folder to hold cloned repositories</para>
      </listitem>
    </orderedlist>
    <informaltable frame="all">
      <tgroup cols="1"><tbody><row><entry><para>&gt;# mkdir -p /opt/git</para></entry></row></tbody></tgroup>
    </informaltable>
    <orderedlist>
      <listitem>
        <para>Clone murano-deployment repository</para>
      </listitem>
    </orderedlist>
    <informaltable frame="all">
      <tgroup cols="1"><tbody><row><entry><para>&gt;# cd /opt/git&gt;# git clone git://github.com/stackforge/murano-deployment.git</para></entry></row></tbody></tgroup>
    </informaltable>
    <orderedlist>
      <listitem>
        <para>Change directory to murano-deployment and switch to release-0.2 branch</para>
      </listitem>
    </orderedlist>
    <informaltable frame="all">
      <tgroup cols="1"><tbody><row><entry><para>&gt;# cd /opt/git/murano-deployment&gt;# git checkout -b release-0.2 origin/release-0.2</para></entry></row></tbody></tgroup>
    </informaltable>
    <orderedlist>
      <listitem>
        <para>Install prerequisites</para>
      </listitem>
    </orderedlist>
    <informaltable frame="all">
      <tgroup cols="1"><tbody><row><entry><para>&gt;# cd /opt/git/murano-deployment/devbox-scripts&gt;# ./murano-git-install.sh prerequisites</para></entry></row></tbody></tgroup>
    </informaltable>
    <orderedlist>
      <listitem>
        <para>Configure lab binding configuration file /etc/murano-deployment/lab-binding.rc</para>
      </listitem>
    </orderedlist>
    <informaltable frame="all">
      <tgroup cols="1"><tbody><row><entry><para>LAB_HOST='***<note><remark>Denis Koryavov:</remark></note><note><remark>I think there should be an other address.</remark></note>.***.***.***'AUTH_URL="http://$LAB_HOST:5000/v2.0"ADMIN_USER='admin'ADMIN_PASSWORD='***'RABBITMQ_LOGIN='<note><remark>tsufiev:</remark></note><note><remark>Is it really 'muranouser' and not 'murano' we use on our devboxes?</remark></note>muranouser'RABBITMQ_PASSWORD='murano'RABBITMQ_VHOST=<note><remark>tsufiev:</remark></note><note><remark>Considering that most users are an idiots (or like me :)), I'd stress that 'muranovhost' must already exist.</remark></note>'muranovhost'</para><para>BRANCH_NAME='release-0.<note><remark>Igor Yozhikov:</remark></note><note><remark>In the release-0.2 default BRANCH_NAME='master' instad of 'release-0.2'</remark></note>2'</para></entry></row></tbody></tgroup>
    </informaltable>
    <para/>
    <para>Please remember that recommend to <link linkend="">Use</link><link linkend=""> </link><link linkend="">separate</link><link linkend=""> </link><link linkend="">vHost</link><link linkend=""> </link><link linkend="">in</link><link linkend=""> </link><link linkend="">RabbitMQ</link></para>
    <orderedlist>
      <listitem>
        <para>Install Murano components</para>
      </listitem>
    </orderedlist>
    <informaltable frame="all">
      <tgroup cols="1"><tbody><row><entry><para>&gt;# ./murano-git-install.sh install</para></entry></row></tbody></tgroup>
    </informaltable>
    <orderedlist>
      <listitem>
        <para>Login to the Dashboard using URL http://&lt;your VM IP&gt;/dashboard</para>
      </listitem>
    </orderedlist>
  </section>
  <section>
    <title>Manual Way</title>
    <para>Build your VM using instructions from<note><remark>Denis Myznikov:</remark></note><note><remark>Link in nowhere</remark></note><note><remark>Dmitry Teselkin:</remark></note><note><remark>Fixed</remark></note> <link linkend="">Murano</link><link linkend=""> </link><link linkend="">VM</link> first.</para>
    <para/>
    <para>Package for Ubuntu and CentOS already in progress and will soon be accessible for users. While they are not available, we provide information about how to get and install all murano services from source code below. We made setup scripts for automated installation of our products which accepts install and uninstall command line arguments. Service startup jobs are handled by Upstart. </para>
    <para>At first we need to create some kind of working directory. </para>
    <para/>
    <para>NOTE: All installation steps require the superuser rights.</para>
    <para/>
    <informaltable frame="all">
      <tgroup cols="1"><tbody><row><entry><para>&gt;# mkdir -p /opt/git &amp;&amp; cd /opt/git</para></entry></row></tbody></tgroup>
    </informaltable>
    <para>NOTE: Please, track actual projects stable branch, at the time of writing current stable branch is - release-0.2</para>
  </section>
  <section>
    <title>Murano-Api</title>
    <orderedlist>
      <listitem>
        <para>Get source code</para>
      </listitem>
    </orderedlist>
    <informaltable frame="all">
      <tgroup cols="1"><tbody><row><entry><para>&gt;# git clone https://github.com/stackforge/murano-api -b release-0.2</para><para>&gt;# chmod +x murano-api/setup*.sh</para></entry></row></tbody></tgroup>
    </informaltable>
    <orderedlist>
      <listitem>
        <para>Install the component</para>
      </listitem>
    </orderedlist>
    <informaltable frame="all">
      <tgroup cols="1"><tbody><row><entry><para>&gt;# murano-api/setup.sh install</para></entry></row></tbody></tgroup>
    </informaltable>
    <orderedlist>
      <listitem/>
    </orderedlist>
    <informaltable frame="all">
      <tgroup cols="1"><tbody><row><entry><para>&gt;# murano-api/setup-centos.sh install</para></entry></row></tbody></tgroup>
    </informaltable>
    <para/>
    <para>Configuration:</para>
    <informaltable frame="all">
      <tgroup cols="1"><tbody><row><entry><para>&gt;# cd /etc/murano-api &amp;&amp; cp murano-api-paste.ini.sample murano-api-paste.ini</para><para>&gt;# cd /etc/murano-api &amp;&amp; cp murano-api.conf.sample murano-api.conf</para></entry></row></tbody></tgroup>
    </informaltable>
    <para>NOTE: <note><remark>Denis Myznikov:</remark></note><note><remark>IMHO need add 2 lines - vi murano-api-paste.ini and vi murano-api.conf for better understanding</remark></note>Before start service, set proper configuration values in configuration files mentioned above.</para>
    <para/>
    <para><note><remark>tsufiev:</remark></note><note><remark>Looks like step-by-step instructions. Imagine the user saying to himself: why the hell am i doing this?! ))))</remark></note>Service control:</para>
    <informaltable frame="all">
      <tgroup cols="1"><tbody><row><entry><para>&gt;# start murano-api</para><para>&gt;# stop murano-api</para><para>&gt;# restart murano-api</para><para>&gt;# status murano-api</para></entry></row></tbody></tgroup>
    </informaltable>
  </section>
  <section>
    <title>Murano-Conductor</title>
    <orderedlist>
      <listitem>
        <para>Get source code</para>
      </listitem>
    </orderedlist>
    <informaltable frame="all">
      <tgroup cols="1"><tbody><row><entry><para><note><remark>Denis Myznikov:</remark></note><note><remark>Need to add "cd /opt/git/"</remark></note>&gt;# git clone https://github.com/stackforge/murano-conductor -b release-0.2</para><para>&gt;# chmod +x murano-conductor/setup*.sh</para></entry></row></tbody></tgroup>
    </informaltable>
    <orderedlist>
      <listitem>
        <para>Install the component</para>
      </listitem>
    </orderedlist>
    <informaltable frame="all">
      <tgroup cols="1"><tbody><row><entry><para>&gt;# murano-conductor/setup.sh install</para></entry></row></tbody></tgroup>
    </informaltable>
    <orderedlist>
      <listitem>
        <para>on CentOS</para>
      </listitem>
    </orderedlist>
    <informaltable frame="all">
      <tgroup cols="1"><tbody><row><entry><para>&gt;# murano-conductor/setup-centos.sh install</para></entry></row></tbody></tgroup>
    </informaltable>
    <para>Configuration</para>
    <informaltable frame="all">
      <tgroup cols="1"><tbody><row><entry><para>&gt;# cd /etc/murano-conductor &amp;&amp; cp conductor-paste.ini.sample conductor-paste.ini</para><para>&gt;# cd /etc/murano-conductor &amp;&amp; cp conductor.conf.sample conductor.conf</para></entry></row></tbody></tgroup>
    </informaltable>
    <para>NOTE: <note><remark>Denis Myznikov:</remark></note><note><remark>IMHO also line - vi conductor.conf, </remark></note><note><remark>no need to edit the file conductor-paste.ini</remark></note><note><remark>tsufiev:</remark></note><note><remark>Also, s/start/starting the/</remark></note>Before start service, set proper configuration values in configuration files mentioned <note><remark>Denis Myznikov:</remark></note><note><remark>and start the service by command &gt;# start murano-conductor</remark></note>above.</para>
    <para/>
    <para>Service control:</para>
    <informaltable frame="all">
      <tgroup cols="1"><tbody><row><entry><para>&gt;# start murano-conductor</para><para>&gt;# stop murano-conductor</para><para>&gt;# restart murano-conductor</para><para>&gt;# status murano-conductor</para></entry></row></tbody></tgroup>
    </informaltable>
  </section>
  <section>
    <title>Murano-Dashboard</title>
    <para>At first, Install OpenStack dashboard(Horizon)  and dependent packages.</para>
    <para/>
    <para>How-to do this:</para>
    <orderedlist>
      <listitem>
        <para>On Ubuntu</para>
      </listitem>
    </orderedlist>
    <informaltable frame="all">
      <tgroup cols="1"><tbody><row><entry><para>&gt;# apt-get install -y memcached libapache2-mod-wsgi openstack-dashboard</para><para>&gt;# dpkg --purge openstack-dashboard-ubuntu-theme # optional step</para></entry></row></tbody></tgroup>
    </informaltable>
    <para>After install is complete, openstack dashboard should be available at: http://&lt;your VM IP&gt;/horizon</para>
    <para/>
    <orderedlist>
      <listitem>
        <para>On CentOS</para>
      </listitem>
    </orderedlist>
    <informaltable frame="all">
      <tgroup cols="1"><tbody><row><entry><para>&gt;# yum install python-netaddr.noarch python-keystoneclient.noarch python-django-horizon.noarch python-django-openstack-auth.noarch  httpd.x86_64 mod_wsgi.x86_64 openstack-dashboard.noarch --assumeyes</para><para>&gt;# chkconfig httpd on</para></entry></row></tbody></tgroup>
    </informaltable>
    <para>After install complete, openstack dashboard should be available at: http://&lt;your VM IP&gt;/dashboard</para>
    <para/>
    <para>Installation of the murano-dashboard is described below.</para>
    <orderedlist>
      <listitem>
        <para>Get source code</para>
      </listitem>
    </orderedlist>
    <informaltable frame="all">
      <tgroup cols="1"><tbody><row><entry><para>&gt;# git clone https://github.com/stackforge/murano-dashboard -b release-0.2</para><para>&gt;# chmod +x murano-dashboard/setup*.sh</para></entry></row></tbody></tgroup>
    </informaltable>
    <orderedlist>
      <listitem>
        <para>Install the component</para>
      </listitem>
    </orderedlist>
    <orderedlist>
      <listitem/>
    </orderedlist>
    <informaltable frame="all">
      <tgroup cols="1"><tbody><row><entry><para>&gt;# murano-dashboard/setup.sh install</para></entry></row></tbody></tgroup>
    </informaltable>
    <orderedlist>
      <listitem/>
    </orderedlist>
    <informaltable frame="all">
      <tgroup cols="1"><tbody><row><entry><para>&gt;# murano-dashboard/setup-centos.sh install</para></entry></row></tbody></tgroup>
    </informaltable>
  </section>
  <section>
    <title>Murano Services Configuration</title>
  </section>
  <section>
    <title>RabbitMQ Configuration Notes</title>
    <para>OpenStack rabbitMQ credentials could be used for murano services, but prefered way is to make additional changes into rabbitMQ configuration, like own vhost, login and password. These steps require superuser rights and should be run on the OpenStack controller node where rabbitMQ service resides.</para>
    <para/>
    <para>How to do this:</para>
    <informaltable frame="all">
      <tgroup cols="1"><tbody><row><entry><para>&gt;# rabbitmqctl add_user muranouser muranopassword</para><para>&gt;# rabbitmqctl set_user_tags muranouser administrator</para><para>&gt;# rabbitmqctl add_vhost muranovhost</para><para>&gt;# rabbitmqctl set_permissions -p muranovhost muranouser ".*" ".*" ".*"</para></entry></row></tbody></tgroup>
    </informaltable>
  </section>
  <section>
    <title>Keystone Configuration Notes</title>
    <para>Service entry for murano-api and endpoint associated with it could also be  configured in the keystone. If there is no record about murano-api in the keystone murano-dashboard would try to reach murano-api service at localhost on the default murano-api port 8082. </para>
    <para/>
    <para>How to add service record into the keystone using python keystone client: </para>
    <informaltable frame="all">
      <tgroup cols="1"><tbody><row><entry><para>&gt;# keystone service-create --name muranoapi --type murano --description "Murano-Api Service"</para></entry></row></tbody></tgroup>
    </informaltable>
    <para>This command returns UUID of the created service record, which should be used below.</para>
    <para/>
    <informaltable frame="all">
      <tgroup cols="1"><tbody><row><entry><para>&gt;# keystone endpoint-create \</para><para>  --region RegionOne \</para><para>  --service-id UUID_from_above \</para><para>  --publicurl http://murano_vm_address:8082 \</para><para>  --internalurl http://murano_vm_address:8082 \</para><para>  --adminurl http://murano_vm_address:8082</para></entry></row></tbody></tgroup>
    </informaltable>
  </section>
  <section>
    <title>Murano-Api</title>
    <para>Configuration files of the murano-api service reside at /etc/murano-api directory. Basic configuration parameters are listed below.</para>
    <orderedlist>
      <listitem>
        <para>murano-api.conf </para>
      </listitem>
    </orderedlist>
    <informaltable frame="all">
      <tgroup cols="1"><tbody><row><entry><para>[DEFAULT]</para><para>...</para><para>bind_host = 0.0.0.0</para><para>bind_port = 8082</para><para>log_file = /var/log/murano-api.log</para><para>...</para><para>…</para><para>[database]</para><para>...</para><para>#connection = mysql://mysqluser:mysqlpassword@mysqlhost:3306/murano</para><para>connection = sqlite:////etc/murano-api/murano.sqlite</para><para>…</para><para>...</para><para>[rabbitmq]</para><para>host = &lt;rabbitmq ip&gt;</para><para>port = 5672</para><para>login = &lt;rabbitmq login&gt;</para><para>password = &lt;rabbitmq password&gt;</para><para>virtual_host = &lt;rabbitmq vhost&gt;</para><para>...</para><para/></entry></row></tbody></tgroup>
    </informaltable>
    <orderedlist>
      <listitem>
        <para>murano-api-paste.ini</para>
      </listitem>
    </orderedlist>
    <informaltable frame="all">
      <tgroup cols="1"><tbody><row><entry><para>...</para><para>[filter:authtoken]</para><para>auth_host = &lt;keystone_ip&gt;</para><para>auth_port = 35357</para><para>auth_protocol = http</para><para>admin_tenant_name = admin</para><para>admin_user = admin</para><para>admin_password = admin_password</para><para>...</para></entry></row></tbody></tgroup>
    </informaltable>
  </section>
  <section>
    <title>Murano-Conductor</title>
    <para>Configuration files of the murano-conductor service reside at /etc/murano-conductor directory. Basic configuration parameters are listed below:</para>
    <orderedlist>
      <listitem>
        <para>conductor.conf</para>
      </listitem>
    </orderedlist>
    <informaltable frame="all">
      <tgroup cols="1"><tbody><row><entry><para>[DEFAULT]</para><para>…</para><para>log_file = /var/log/murano-conductor.log</para><para>…</para><para>…</para><para>[keystone]</para><para># URL of OpenStack KeyStone service REST API.</para><para># Typically only hostname (or IP) needs to be changed</para><para>auth_url = http://keystone_ip:5000/v2.0</para><para>...</para><para>...</para><para>[rabbitmq]</para><para>host = &lt;rabbitmq ip&gt;</para><para>port = 5672</para><para>login = &lt;rabbitmq login&gt;</para><para>password = &lt;rabbitmq password&gt;</para><para>virtual_host = &lt;rabbitmq vhost&gt;</para><para>...</para></entry></row></tbody></tgroup>
    </informaltable>
    <orderedlist>
      <listitem>
        <para>conductor-paste.ini</para>
      </listitem>
    </orderedlist>
    <para>It’s empty but must exist.</para>
  </section>
  <section>
    <title>Murano-Dashboard</title>
    <para> Murano-dashboard does not need to be configured, but we need to set up proper OPENSTACK_HOST variable in the OpenStack dashboard configuration file, which resides at /etc/openstack-dashboard directory. It should point to the OpenStack controller node.</para>
    <para/>
    <informaltable frame="all">
      <tgroup cols="1"><tbody><row><entry><para>…</para><para># optional, but sometimes very useful to set DEBUG to ‘True’</para><para>DEBUG = True</para><para>...</para><para>OPENSTACK_HOST = “openstack_controller_address” </para><para>...</para></entry></row></tbody></tgroup>
    </informaltable>
  </section>
  <section>
    <title>Troubleshooting</title>
    <para>Set debug options to "true" in all config files - dashboard, api, conductor.</para>
    <para/>
    <para>NOTE: the following debug sequence should be used when you have no idea about why the system isn't working. If you have one, you may skip unnecessary sections.</para>
    <para/>
    <para>First, stop both murano-api and murano-conductor services. We will start them one by one from the console.</para>
  </section>
  <section>
    <title>Murano-Api</title>
    <orderedlist>
      <listitem>
        <para>Open new console</para>
      </listitem>
      <listitem>
        <para>Start api service manually</para>
      </listitem>
    </orderedlist>
    <informaltable frame="all">
      <tgroup cols="1"><tbody><row><entry><para>&gt;# murano-api --config-dir /etc/murano-api &gt; /var/log/murano-api-live.log &amp;</para><para>&gt;# tailf /var/log/murano-api-live.log</para></entry></row></tbody></tgroup>
    </informaltable>
    <orderedlist>
      <listitem>
        <para>Open dashboard, create and send to deploy some simple environment.</para>
      </listitem>
      <listitem>
        <para>Open RabbitMQ web console, open your vhost and ensure that queues were created and there is at least one message.</para>
      </listitem>
      <listitem>
        <para>Check log for errors - there shouldn't be any</para>
      </listitem>
      <listitem>
        <para>Keep murano-api service running.</para>
      </listitem>
    </orderedlist>
  </section>
  <section>
    <title>Murano-Conductor</title>
    <orderedlist>
      <listitem>
        <para>Open new console</para>
      </listitem>
      <listitem>
        <para>Start conductor from console</para>
      </listitem>
    </orderedlist>
    <informaltable frame="all">
      <tgroup cols="1"><tbody><row><entry><para>&gt;# muranoconductor --config-dir /etc/murano-conductor &gt; /var/log/murano-conductor-live.log &amp;</para><para>&gt;# tailf /var/log/murano-conductor-live.log</para></entry></row></tbody></tgroup>
    </informaltable>
    <orderedlist>
      <listitem>
        <para>Check that there is no python exceptions in the log. Some errors like 404 are ok, as conductor tries to delete environment that doesn't exist.</para>
      </listitem>
      <listitem>
        <para>Check heat stack status. It should not be in FAILED state. If it is - check heat and nova error log to find the cause.</para>
      </listitem>
      <listitem>
        <para>Keep murano-conductor service running.</para>
      </listitem>
    </orderedlist>
    <para/>
    <para>Now, the environment should be created, and instance(s) launched.</para>
    <para/>
    <para>Next, check if instances were configured correctly by the cloudbase init tool.</para>
    <para/>
    <para>Log in to any instance and open powershell log file at C:\Murano\PowerShell.log. There shouldn't be any exceptions logged. Other symptoms of successful configuration is that the instance was renamed and you have to press &lt;Ctrl&gt;+&lt;Alt&gt;+&lt;Del&gt; to log into. Unconfigured instance has autologon enabled for the first logon, so if console is open, the instance is not configured (yet).</para>
    <para/>
    <para>Check that Murano Agent has correct config file. If there is a .bak file, then it was changed by the init script. Check the file,  ensure that it has correct values.</para>
    <para/>
    <para>Check Murano Agent log file. There should be logged all tasks received by the agent from the conductor.</para>
    <para/>
    <para>Check PowerShell log. There should be messages about all functions, executed on the instance.</para>
  </section>
  <section>
    <title>Log files</title>
  </section>
  <section>
    <title>Murano Log Files</title>
    <orderedlist>
      <listitem>
        <para>/var/log/murano-api.log</para>
      </listitem>
      <listitem>
        <para>/var/log/murano-conductor.log</para>
      </listitem>
      <listitem>
        <para><note><remark>akuznetsova:</remark></note><note><remark>Also need to add info about new log file for dashboard</remark></note><note><remark>tsufiev:</remark></note><note><remark>Should be fixed for releases &gt;0.2</remark></note>/var/log/apache2/errors.log</para>
      </listitem>
      <listitem>
        <para>/var/log/httpd/errors.log</para>
      </listitem>
    </orderedlist>
  </section>
  <section>
    <title>Windows Log Files</title>
    <orderedlist>
      <listitem>
        <para>C:\Murano\PowerShell.log</para>
      </listitem>
      <listitem>
        <para>C:\Murano\Agent\log.txt</para>
      </listitem>
    </orderedlist>
  </section>
  <section>
    <title>Appendix</title>
  </section>
  <section>
    <title>Murano VM</title>
    <para>NOTE: Your VM MUST be attached to the network with Internet and openstack management network (lab network) access.</para>
  </section>
  <section>
    <title>Ubuntu Server 12.04 LTS x86_64</title>
    <para>Installation steps:</para>
    <orderedlist>
      <listitem>
        <para>Install minimal version of the system</para>
      </listitem>
      <listitem>
        <para>When prompted, mark OpenSSH Server to be installed</para>
      </listitem>
      <listitem>
        <para>Login as root</para>
      </listitem>
      <listitem>
        <para>Enable Cloud Archive repository </para>
      </listitem>
      <listitem>
        <para>Update installed OS and packages</para>
      </listitem>
    </orderedlist>
    <para/>
    <orderedlist>
      <listitem>
        <para>Add lines below to the /etc/apt/sources.list.d/grizzly.list file</para>
      </listitem>
    </orderedlist>
    <informaltable frame="all">
      <tgroup cols="1"><tbody><row><entry><para>deb http://ubuntu-cloud.archive.canonical.com/ubuntu precise-updates/grizzly main</para><para>deb http://archive.gplhost.com/debian grizzly main</para><para>deb http://archive.gplhost.com/debian grizzly-backports main</para></entry></row></tbody></tgroup>
    </informaltable>
    <para/>
    <orderedlist>
      <listitem>
        <para>Update the system</para>
      </listitem>
    </orderedlist>
    <informaltable frame="all">
      <tgroup cols="1"><tbody><row><entry><para>&gt;# apt-get update</para><para>&gt;# apt-get install ubuntu-cloud-keyring</para><para>&gt;# apt-get install gplhost-archive-keyring</para><para><note><remark>Denis Koryavov:</remark></note><note><remark>Maybe add # reboot after this command?</remark></note><note><remark>Denis Myznikov:</remark></note><note><remark>No. It works.</remark></note>&gt;# apt-get upgrade</para></entry></row></tbody></tgroup>
    </informaltable>
    <orderedlist>
      <listitem>
        <para>Install additional packages</para>
      </listitem>
    </orderedlist>
    <informaltable frame="all">
      <tgroup cols="1"><tbody><row><entry><para>&gt;# apt-get install mc unzip git make gcc python-setuptools python-pip</para></entry></row></tbody></tgroup>
    </informaltable>
  </section>
  <section>
    <title>CentOS 6.4 x86_64</title>
    <para>Installation steps:</para>
    <orderedlist>
      <listitem>
        <para>Install minimal version of the system.</para>
      </listitem>
      <listitem>
        <para>When prompted, mark OpenSSH Server to be installed</para>
      </listitem>
      <listitem>
        <para>Login as root</para>
      </listitem>
      <listitem>
        <para>Enable RedHat Openstack and Epel repository</para>
      </listitem>
      <listitem>
        <para>Update installed OS and packages</para>
      </listitem>
    </orderedlist>
    <orderedlist>
      <listitem>
        <para>Add repositories and update OS</para>
      </listitem>
    </orderedlist>
    <informaltable frame="all">
      <tgroup cols="1"><tbody><row><entry><para>&gt;# yum install -y http://rdo.fedorapeople.org/openstack/openstack-grizzly/rdo-release-grizzly.rpm</para><para>&gt;# yum install -y http://mirror.yandex.ru/epel/6/x86_64/epel-release-6-8.noarch.rpm</para><para>&gt;# yum update</para><para>&gt;# yum upgrade</para></entry></row></tbody></tgroup>
    </informaltable>
    <orderedlist>
      <listitem>
        <para>Install additional packages</para>
      </listitem>
    </orderedlist>
    <informaltable frame="all">
      <tgroup cols="1"><tbody><row><entry><para>&gt;# yum install mc unzip git make gcc python-setuptools python-pip upstart</para></entry></row></tbody></tgroup>
    </informaltable>
    <para>Most of dependent packages will be installed automatically with setup scripts.</para>
    <para/>
    <para>NOTE: Some words about pip (python-pip) version. In order to have proper versions of python dependency packages installed, pip version MUST be 1.4 or higher!</para>
    <para/>
    <para>How-to determine python-pip version:</para>
    <informaltable frame="all">
      <tgroup cols="1"><tbody><row><entry><para>&gt;# pip --version</para></entry></row></tbody></tgroup>
    </informaltable>
    <para/>
    <para>How-to upgrade pip to latest version:</para>
    <informaltable frame="all">
      <tgroup cols="1"><tbody><row><entry><para>&gt;# pip install --upgrade pip</para></entry></row></tbody></tgroup>
    </informaltable>
    <para>or</para>
    <informaltable frame="all">
      <tgroup cols="1"><tbody><row><entry><para>&gt;# pip install <ulink url="https://pypi.python.org/packages/source/p/pip/pip-1.4.1.tar.gz">https</ulink><ulink url="https://pypi.python.org/packages/source/p/pip/pip-1.4.1.tar.gz">://</ulink><ulink url="https://pypi.python.org/packages/source/p/pip/pip-1.4.1.tar.gz">pypi</ulink><ulink url="https://pypi.python.org/packages/source/p/pip/pip-1.4.1.tar.gz">.</ulink><ulink url="https://pypi.python.org/packages/source/p/pip/pip-1.4.1.tar.gz">python</ulink><ulink url="https://pypi.python.org/packages/source/p/pip/pip-1.4.1.tar.gz">.</ulink><ulink url="https://pypi.python.org/packages/source/p/pip/pip-1.4.1.tar.gz">org</ulink><ulink url="https://pypi.python.org/packages/source/p/pip/pip-1.4.1.tar.gz">/</ulink><ulink url="https://pypi.python.org/packages/source/p/pip/pip-1.4.1.tar.gz">packages</ulink><ulink url="https://pypi.python.org/packages/source/p/pip/pip-1.4.1.tar.gz">/</ulink><ulink url="https://pypi.python.org/packages/source/p/pip/pip-1.4.1.tar.gz">source</ulink><ulink url="https://pypi.python.org/packages/source/p/pip/pip-1.4.1.tar.gz">/</ulink><ulink url="https://pypi.python.org/packages/source/p/pip/pip-1.4.1.tar.gz">p</ulink><ulink url="https://pypi.python.org/packages/source/p/pip/pip-1.4.1.tar.gz">/</ulink><ulink url="https://pypi.python.org/packages/source/p/pip/pip-1.4.1.tar.gz">pip</ulink><ulink url="https://pypi.python.org/packages/source/p/pip/pip-1.4.1.tar.gz">/</ulink><ulink url="https://pypi.python.org/packages/source/p/pip/pip-1.4.1.tar.gz">pip</ulink><ulink url="https://pypi.python.org/packages/source/p/pip/pip-1.4.1.tar.gz">-1.4.1.</ulink><ulink url="https://pypi.python.org/packages/source/p/pip/pip-1.4.1.tar.gz">tar</ulink><ulink url="https://pypi.python.org/packages/source/p/pip/pip-1.4.1.tar.gz">.</ulink><ulink url="https://pypi.python.org/packages/source/p/pip/pip-1.4.1.tar.gz">gz</ulink></para></entry></row></tbody></tgroup>
    </informaltable>
    <para/>
    <para>NOTE: you should pay attention to python-pip after upgrade to version 1.4, because its filesystem location can change from /usr/bin/pip to /usr/local/bin/pip !</para>
    <para/>
    <para>How to handle this situation: </para>
    <informaltable frame="all">
      <tgroup cols="1"><tbody><row><entry><para>&gt;# rm /usr/bin/pip</para><para>&gt;# ln -s /usr/local/bin/pip /usr/bin/pip</para></entry></row></tbody></tgroup>
    </informaltable>
    <para/>
  </section>
</chapter>