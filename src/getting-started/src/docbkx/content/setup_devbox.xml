<?xml version="1.0" encoding="UTF-8"?>
<!--
 Copyright (c) 2013 Mirantis, Inc.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
 implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-->
<chapter xmlns="http://docbook.org/ns/docbook"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd
                            http://www.w3.org/1999/xlink http://www.w3.org/1999/xlink.xsd"
         version="5.0">
    <title>Setup Devbox</title>
        <para>There are a few ways to install Murano devbox</para>
        <itemizedlist>
            <listitem>
                <para>using Vagrant automation tool</para>
            </listitem>
            <listitem>
                <para>using a script to install all components automatically
                </para>
            </listitem>
            <listitem>
                <para>install everything manually</para>
            </listitem>
        </itemizedlist>
        <note>
            <para>
                The preferred way is to use script for automated
                installation. It is described in
                <link linkend="AutomatedWay">Automated Way </link>section below.
            </para>
        </note>
    <section>
        <title>Vagrant Way</title>
        <para>The simplest way to get working Murano devbox is Vagrant tool. This tool is available for Ubuntu only.</para>
        <para><emphasis role="bold">Prepare Environment (Ubuntu)</emphasis></para>
        <itemizedlist>
            <listitem>
                <para>Install VirtualBox:</para>
            </listitem>
        </itemizedlist>
        <programlisting>
># apt-get install virtualbox
        </programlisting>
        <itemizedlist>
            <listitem>
                <para>Install VirtualBox Extension Pack.
                </para>
            </listitem>
            <listitem>
                <para>Install Vagrant:</para>
            </listitem>
        </itemizedlist>
        <programlisting>
># apt-get install vagrant --no-install-recommends
        </programlisting>
        <itemizedlist>
            <listitem>
                <para>Upgrade the Vagrant:</para>
            </listitem>
        </itemizedlist>
        <programlisting>
># wget http://files.vagrantup.com/
            packages/7ec0ee1d00a916f80b109a298bab08e391945243/
            vagrant_1.2.7_x86_64.deb
        </programlisting>
        <programlisting>
># dpkg --install vagrant_1.2.7_x86_64.deb
        </programlisting>
        <para><emphasis role="bold">Launch The Box</emphasis></para>
        <itemizedlist>
            <listitem>
                <para>Clone murano-vagrant repository</para>
            </listitem>
        </itemizedlist>
       <programlisting>
>$ git clone https://github.com/stackforge/murano-deployment.git
       </programlisting>
        <itemizedlist>
            <listitem>
                <para>Change directory to cloned repository folder</para>
            </listitem>
        </itemizedlist>
        <programlisting>
>$ cd murano-deployment/getting-started
>$ git checkout -b release-0.2 origin/release-0.2
        </programlisting>
        <itemizedlist>
            <listitem>
                <para>IMPORTANT STEP:  RabbitMQ credentials are specified to default in lab-binding.rc so don't forget to change them if necessary.
                    For example: - replace all the markers ‘***’  to your settings:

                </para>
            </listitem>
        </itemizedlist>
        <programlisting>
# Lab Settings
#-------------
# Address of the host which provides Keystone service.
#
# LAB_HOST='192.168.1.2'
LAB_HOST='***.***.***.***'
...
        </programlisting>
        <itemizedlist>
            <listitem>
                <para>Launch the box:</para>
            </listitem>
        </itemizedlist>
        <programlisting>
>$ ./launch-the-box.sh
        </programlisting>
        <itemizedlist>
            <listitem>
                <para>The script will do the following:</para>
            </listitem>
            <listitem>
                <para>Vagrant will do the rest:</para>
            </listitem>
            <listitem>
                <para>When everything is done open the http://127.0.0.1:8080/horizon link.
                </para>
            </listitem>
        </itemizedlist>
    </section>
    <section xml:id="AutomatedWay">
        <title>Automated Way</title>
        <itemizedlist>
            <listitem>
                <para>Create a folder to hold git repositories</para>
            </listitem>
        </itemizedlist>
        <programlisting>
># mkdir -p /opt/git cd /opt/git &amp;&amp; cd /opt/git
        </programlisting>
        <itemizedlist>
            <listitem>
                <para>Clone murano-deployment repository</para>
            </listitem>
        </itemizedlist>
        <programlisting>
># git clone git://github.com/stackforge/murano-deployment.git
        </programlisting>
        <itemizedlist>
            <listitem>
                <para>
                    Change directory to murano-deployment and switch to release-0.2 branch
                </para>
            </listitem>
        </itemizedlist>
        <programlisting>
># cd /opt/git/murano-deployment
># git checkout -b release-0.2 origin/release-0.2
        </programlisting>
        <itemizedlist>
            <listitem>
                <para>Install prerequisites. On this step some additional system packages will be installed</para>
            </listitem>
        </itemizedlist>
        <programlisting>
># cd /opt/git/murano-deployment/devbox-scripts
># ./murano-git-install.sh prerequisites
        </programlisting>
        <itemizedlist>
            <listitem>
                <para>Configure lab binding configuration file
                    <filename>/etc/murano-deployment/lab-binding.rc</filename>
                </para>
            </listitem>
        </itemizedlist>
        <programlisting>
LAB_HOST='***.***.***.***'

AUTH_URL="http://$LAB_HOST:5000/v2.0"

ADMIN_USER='admin'
ADMIN_PASSWORD='***'

RABBITMQ_LOGIN='muranouser'
RABBITMQ_PASSWORD='murano'
RABBITMQ_VHOST='muranovhost'
BRANCH_NAME='release-0.2'
    </programlisting>
        <para>It's recommended to use separate vHost in
            <link linkend="Rabbit">RabbitMQ</link>
        </para>
        <itemizedlist>
            <listitem>
                <para>Install Murano components</para>
            </listitem>
        </itemizedlist>
        <programlisting>
># ./murano-git-install.sh install
        </programlisting>
        <itemizedlist>
            <listitem>
                <para>Login to the Dashboard using URL http://uth_port = 35357;your VM IP>/dashboard</para>
            </listitem>
        </itemizedlist>
    </section>
    <section>
        <title>Murano Services Configuration</title>
        <para>This chapter descrides how to configure Murano services
            and services communicating with Murano.</para>
        <section xml:id="Rabbit">
            <title>RabbitMQ Configuration Notes</title>
            <para>OpenStack rabbitMQ credentials could be used for murano services,
                but prefered way is to make additional changes into rabbitMQ
                configuration, like own vhost, login and password. These steps
                require superuser rights and should be run on the OpenStack
                controller node where rabbitMQ service resides.
            </para>
            <para>How to do this:
            <programlisting>
># rabbitmqctl add_user muranouser muranopassword
># rabbitmqctl set_user_tags muranouser administrator
># rabbitmqctl add_vhost muranovhost
># rabbitmqctl set_permissions -p muranovhost muranouser ".*" ".*" ".*"
            </programlisting>
            </para>
        </section>
        <section>
            <title>Keystone Configuration Notes</title>
            <para>Service entry for murano-api and endpoint associated with it
                could also be  configured in the keystone. If there is no record
                about murano-api in the keystone murano-dashboard would try to
                reach murano-api service at localhost on the default murano-api
                port 8082.
            </para>
            <para>How to add service record into the keystone using python keystone
                client:
            <programlisting>
># keystone service-create --name muranoapi --type murano \
                --description "Murano-Api Service"
            </programlisting>
            This command returns UUID of the created service record, which
            should be used below.
            <programlisting>
># keystone endpoint-create \
              --service-id UUID_from_above \
              --publicurl http://murano_vm_address:8082 \
              --internalurl http://murano_vm_address:8082 \
              --adminurl http://murano_vm_address:8082 \
            </programlisting>
            </para>
        </section>
        <section>
            <title>Murano-Api Configuration</title>
            <para>Configuration files of the murano-api service reside at <filename>
                /etc/murano-api</filename> directory. Basic configuration parameters are
                listed below.
            </para>
            <itemizedlist>
                <listitem>
                    <para>murano-api.conf</para>
                </listitem>
            </itemizedlist>
            <programlisting>
[DEFAULT]
...
bind_host = 0.0.0.0
bind_port = 8082
log_file = /var/log/murano-api.log
...
…
[database]
...
#connection = mysql://mysqluser:mysqlpassword@mysqlhost:3306/murano

connection = sqlite:////etc/murano-api/murano.sqlite

…
...
[rabbitmq]
host = &lt;rabbitmq ip>
port = 5672
login = &lt;rabbitmq login>
password = &lt;rabbitmq password>
virtual_host = &lt;rabbitmq vhost>
...
             </programlisting>
            <itemizedlist>
                <listitem>
                    <para>murano-api-paste.ini</para>
                </listitem>
            </itemizedlist>
            <programlisting>
...
[filter:authtoken]
auth_host = &lt;keystone_ip>
auth_port = 35357
auth_protocol = http
admin_tenant_name = admin
admin_user = admin
admin_password = admin_password
...
            </programlisting>
        </section>
        <section>
            <title>Murano-Conductor</title>
            <para>
                Configuration files of the murano-conductor service reside at
                <filename>/etc/murano-conductor </filename>directory. Basic configuration parameters are
                listed below:
            </para>
            <itemizedlist>
                <listitem>
                    <para>conductor.conf</para>
                </listitem>
            </itemizedlist>
            <programlisting>
[DEFAULT]
…
log_file = /var/log/murano-conductor.log

…
…
[keystone]
# URL of OpenStack KeyStone service REST
    API.

# Typically only hostname (or IP) needs to be
    changed

auth_url = http://keystone_ip:5000/v2.0
...
...
[rabbitmq]
host = &lt;rabbitmq ip>
port = 5672
login = &lt;rabbitmq login>
password = &lt;rabbitmq password>
virtual_host = &lt;rabbitmq vhost>
...
             </programlisting>
            <itemizedlist>
                <listitem>
                    <para>conductor-paste.ini</para>
                </listitem>
            </itemizedlist>
            <para>It’s empty but must exist.</para>
        </section>
        <section>
            <title>Murano-Dashboard</title>
            <para> Murano-dashboard does not need to be configured, but we need to
                set up proper OPENSTACK_HOST variable in the OpenStack dashboard
                configuration file, which resides at
                <filename> /etc/openstack-dashboard </filename>
                directory. It should point to the OpenStack controller node.
            </para>
            <programlisting>
…
# optional, but sometimes very useful to set DEBUG to ‘True’
DEBUG = True
...
OPENSTACK_HOST =
    “openstack_controller_address”
...
            </programlisting>
        </section>
    </section>
</chapter>

