<?xml version="1.0" encoding="UTF-8"?>
<!--
  Copyright (c) 2013 Mirantis, Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
   implied.
   See the License for the specific language governing permissions and
   limitations under the License.
  -->

<chapter xmlns="http://docbook.org/ns/docbook"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd
                          http://www.w3.org/1999/xlink http://www.w3.org/1999/xlink.xsd"
         version="5.0">
    <title>Blueprint</title>
    <section>

        <title>Project Background</title>
        <para>Enterprise customers frequently use Windows-based environments for their internal and external
            products. Configuration of the Windows environment is a complex task which usually requires a lot of
            effort from administrators. Windows setup consists of numerous services which might be tightly coupled
            to each other. While the automated installation of Windows services can be fairly straightforward,
            service configuration can be hard to automate because it requires a well-designed Windows architecture
            and deep knowledge of Windows services configuration.
        </para>
        <para>Currently several open source solutions exists that can help to partially solve automation of Windows
            environment provisioning. In the world of OpenStack there is the Heat project, which is similar to
            Amazon Cloud Formation. Heat is an excellent tool for managing OpenStack cloud resources such as VM
            instances, security groups, and so on. It allows you to define all cloud resources in a single JSON
            template, then later maintain all of those resources by editing that template. Although the declarative
            template approach is well suited to OpenStack resources, it quickly becomes complex when it comes to
            application management.
        </para>
        <para>Another option is a tool such as Chef or Puppet. These tools are flexible, but require you to have a
            deep knowledge of scripting and require a significant amount of effort to manually script or modify
            cookbooks for your specific environment configuration. This is manageable in a stable environment, but
            it becomes time-consuming and involves manual script coding when one needs to deploy various
            environments with rapidly changing configurations. Also Chef and Puppet require additional
            infrastructure to support them.
        </para>
        <para>The biggest problem for both approaches above is in supporting multi-step configuration of services
            with circular dependencies required for correct configuration of Windows services. This can be solved by
            using external orchestration.
        </para>
        <para>Another potential problem is the lack of UI functionality enabling creation and configuration of an
            environment without writing a script.
        </para>
        <section>
            <title>Proposal</title>
            <para>Mirantis proposes to introduce a new service which will allow a non-experienced user to deploy
                reliable Windows based environments in a “push-the-button” manner. The key goal is to provide a UI
                and API enabling the deployment and operation of Windows Environments at the Windows Services
                abstraction level. The service should be able to orchestrate complex circular dependent cases in
                order to set up a complex Windows Environment with multiple dependant services.
            </para>
            <para>The service will address following use cases:
                <itemizedlist spacing="compact">
                    <listitem>
                        <para>Self-provisioning of predefined Windows services with their dependencies</para>
                    </listitem>
                    <listitem>
                        <para>Automation of administrative tasks during data center roll-out</para>
                    </listitem>
                    <listitem>
                        <para>Custom windows application as a windows service</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                The solution will provide higher level of abstraction for manipulation Windows Environments. Key
                concepts are:
                <itemizedlist spacing="compact">
                    <listitem>
                        <para>Windows Service - a service such as Active Directory, MSSQL, or IIS, which usually
                            consists of multiple virtual machines and has multiple dependencies.
                        </para>
                    </listitem>
                    <listitem>
                        <para>Windows Environment - a logical unit for all Services and represents a classical
                            Windows Datacenter
                        </para>
                    </listitem>
                    <listitem>
                        <para>Windows VM instance - a VM which hosts a Windows Service. A Windows Service might be
                            deployed
                        </para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                The Key Features of the Service are the following:
                <orderedlist>
                    <listitem>
                        <para>Native to OpenStack</para>
                    </listitem>
                    <listitem>
                        <para>Introduces abstraction level for Windows Environments</para>
                    </listitem>
                    <listitem>
                        <para>Supports Availability Zones and Disaster Recovery scenarios</para>
                    </listitem>
                    <listitem>
                        <para>Uses native Windows features for HA solutions</para>
                    </listitem>
                </orderedlist>
            </para>
        </section>
    </section>
    <section xml:id="architecture">
        <title>Architecture</title>
        <para>
            The Murano Service communicates with the following OpenStack components:
            <itemizedlist>
                <listitem>
                    <para>Horizon - provides a GUI with ability to use all Murano features;</para>
                </listitem>
                <listitem>
                    <para>Keystone - authenticates users and provides the security token that is used to work with
                        OpenStack, hence limiting the user abilities in Murano based on OpenStack privileges;
                    </para>
                </listitem>
                <listitem>
                    <para>Heat - is used to provision VMs and other OpenStack resources for Windows Environments;
                    </para>
                </listitem>
                <listitem>
                    <para>Glance - stores Windows Server VM images, with each image containing an installed OS and a
                        set of scripts
                    </para>
                </listitem>
                <listitem>
                    <para>Quantum - provides the network configuration API</para>
                </listitem>
                <listitem>
                    <para>Agent - provides agent functionality to communicate with the Orchestration Engine and
                        executes tasks on VMs
                    </para>
                </listitem>
            </itemizedlist>
        </para>
        <figure xml:id="muranoarchitecture">
            <title>Architecture</title>
            <mediaobject>
                <imageobject role="fo">
                    <imagedata fileref="figures/architecture_diagram.png"
                               contentwidth="5in"/>
                </imageobject>
                <imageobject role="html">
                    <imagedata fileref="figures/architecture_diagram.png"/>
                </imageobject>
            </mediaobject>
        </figure>
        <section>
            <title>REST API</title>
            <para>Murano exposes a service endpoint for communication with a client. It exposes API functions to
                manipulate objects such as environment and service.
            </para>
            <para>This component is responsible for translating API function parameters to Object Model attributes
                and propagating the deployment status from the Orchestration Engine.
            </para>
        </section>
        <section>
            <title>Object Model</title>
            <para>An internal representation of Windows Services and Environments. All attributes and entities are
                described in the API specification.
            </para>
        </section>
        <section>
            <title>Orchestration Engine</title>
            <para>This is the core component which evaluates Object Model changes and creates a plan for
                implementing these changes on the instances or in the cloud. This component will support extensions
                via plug-ins. Plugins can add new services and extend existing services for integration. Currently
                there are two services which are already implemented as plugins. They are Active Directory and IIS
                Service.
            </para>
        </section>
    </section>
    <section>
        <title>Integration with Heat</title>
        <para>Heat is a cloud resource management engine that allows you to manipulate resources that represent
            OpenStack entities (Security Groups, Instances, Floating IPs, Volumes, etc.) and some entities such as
            AutoScaling groups from a single point of control.
        </para>
        <para>OpenStack resource provisioning is one of the steps required for environment deployment and Heat will
            be used for that purpose. Heat allows you to define all OpenStack resources in a single document that
            will be easy to maintain and will not require resorting to multiple OpenStack APIs while keeping the
            software configuration separate.
        </para>
    </section>
    <section>
        <title>Windows on OpenStack</title>
        <para>Windows works on KVM pretty smoothly, and with the RedHat-created open-source VirtIO drivers for
            Windows, it’s possible to work efficiently with KVM exposed devices.
        </para>
        <para>In OpenStack’s Grizzly release, Microsoft’s hypervisor Hyper-V will be supported. The Hyper-V virtual
            switch will be also supported as a Quantum plug-in. From the performance viewpoint, Hyper-V Server 2012
            compares very favorably with bare metal, processing just over 6% fewer transactions per second compared
            to the same workload running on a similarly configured physical server.
        </para>
        <para>Also, unlike the current OpenStack, Hyper-V also natively supports Windows Clusters.
        </para>
    </section>
</chapter>
